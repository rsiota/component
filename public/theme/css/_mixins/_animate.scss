/* Animates a property between two values. Delay/start & duration parameters
need to be specified 

@include animate(height, 200px, 1000px, 0s, 1s);

Animates the height property with a start time of 0s and a duration o 1s
*/

@use "sass:list";
@use "sass:string";
@use "sass:map";
@use "sass:math";

$listAnimations: ();

// Find Selector From Animation
@function findSelector($animation) {
    $classIndex: string.index($animation, "--");
    $class: string.slice($animation, 1, $classIndex - 6);
    @return $class;
}

// String / Replace 
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

// Concatenates Animations
@mixin concatenateAnimations($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {

        $keyframes: nth($animate, $i);
        $animation: $keyframes;
        $animations: #{$animations + $animation};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }

    animation: $animations;
}

// Checks if current animation selector 
// is different from stored animation selector 
@function checkotherSelector($currentSelector) {

    @if length($listAnimations) !=0 {

        $anotherSelector: false;

        @each $animation in $listAnimations {

            $selector: findSelector($animation);

            @if ($selector !=$currentSelector) {
                $anotherSelector: true;

            }
        }

        @return $anotherSelector;
    }

    @return false;
}

// Animate Property Between Two Media Queries 
@mixin animate($property, $start, $end, $delay: "", $time: "") {

    $selector: str-replace(#{&}, '.', '');
    $timePrefix: 'DE';
    $delayPrefix: 'MO';

    @if ($time !="") {
        $timePrefix: $time;
    }

    @if ($delay !="") {
        $delayPrefix: $delay;
    }

    $keyframe: str-replace($selector, ' ', '_')+'-'+$delayPrefix+$timePrefix+'--'+$property;
    $animation: $keyframe + ' ' + $time + ' ease '  + $delay + ' forwards'; 

    $currentSelector: str-replace($selector, ' ', '_');

    $otherSelector: checkotherSelector($currentSelector);

    @if $otherSelector==true {
        $listAnimations: () !global;
    }

    @keyframes #{$keyframe} {

        0%
        {
            #{$property}: $start;
        }
        100% {
            #{$property}: $end;
        }
    }

    $listAnimations: list.append($listAnimations, $animation) !global;
    @include concatenateAnimations($listAnimations...);

}